<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kokurasona.github.io</id>
    <title>Sonatta: 生活小栈</title>
    <updated>2025-03-23T06:10:45.589Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kokurasona.github.io"/>
    <link rel="self" href="https://kokurasona.github.io/atom.xml"/>
    <subtitle>孤坐有谁同此意 白云空见渚禽还</subtitle>
    <logo>https://kokurasona.github.io/images/avatar.png</logo>
    <icon>https://kokurasona.github.io/favicon.ico</icon>
    <rights>All rights reserved 2025, Sonatta: 生活小栈</rights>
    <entry>
        <title type="html"><![CDATA[《オトメ世界の歩き方》游玩感想]]></title>
        <id>https://kokurasona.github.io/post/hgLo67xlb7/</id>
        <link href="https://kokurasona.github.io/post/hgLo67xlb7/">
        </link>
        <updated>2025-01-20T14:58:46.000Z</updated>
        <content type="html"><![CDATA[<p><em>注1：本文包含剧透</em><br>
<em>注2：由于本作没有官方中文且角色名字没有注明汉字写法，所以后文中一律使用日文（2月8日更新：突然发现编剧在推特上发了汉字写法，已补充）</em></p>
<p>本作是去年十月底发售的，由于一直比较忙没什么时间，陆陆续续折腾到今年一月才推完，然后又一路咕到现在，实在惭愧。</p>
<p>说实话在咕的这段时间也犹豫过要不要写个简评，毕竟我又不是什么 GalGame 领域大神，而且也很少给游戏写简评，不过犹豫到最后还是决定写写，一是本作在网上确实没啥声量，评价偏少；二是我通关后也看了一些感想，有一些不同的想法分享一下<s>三是好久没写博客了水一篇</s>。</p>
<h3 id="省流评价">省流评价</h3>
<p>先说评价，平平无奇就是我给它的评价，或者再尖锐些，我想用高不成低不就来评价它。</p>
<p>既算不上剧情作，说废萌又不彻底。本作的基础设定无论是向下直接做成拔作，还是向上去够一够剧情作，其实都更加适合，但是剧本偏偏要在这么一个废土半反乌托邦的背景里塞大量废萌，实在是很难评。</p>
<h3 id="前言">前言</h3>
<p>好了，评价已经说完了，现在开始就是剧透和碎碎念了。</p>
<p>首先说一下玩这作的契机，其实我一般是不会玩这种新社的作品的，况且还跳票了两个月，这两个点加起来基本就不会太好，事实也确实如此。</p>
<p>最初关注到本作是因为我是本作画师 mignon 老师的粉丝，老师发男主抱枕图的时候才知道本作，简单看了下世界观感觉还是有些想法的，所以就这么进坑了（对没错其实就是被男主美色骗进来的，白毛是无法抵抗的）</p>
<p>事实上全作玩下来画的最好的也就是男主，两个女主画的都差点意思，而且众所周知 mignon 老师的特色是小腹，但是本作却并没给老师太大发挥的空间（而且CG数量也不算多），属实是暴殄天物了。</p>
<h3 id="剧情">剧情</h3>
<p>虽然本作官网上写的“ディストピア世界（反乌托邦世界）”，但是其实无论用反乌托邦还是废土都不能准确概括本作，毕竟不能说有个 AI 帮忙管理国家就叫反乌托邦，说是废土吧，国家还是存在的（而且打到一周目最后会告诉你海外还有别的国家存在，也是挺让人震惊的）</p>
<p>本作的剧情构架其实有点像《86 -不存在的战区-》，只不过己方这边带个 AI，然后把 86 里的种族歧视改成性别歧视就差不多了，其实这个架构作为深入去探讨一些东西的舞台来说，是挺不错的，可惜剧本并没有这么做，（还往里面塞大量的废萌），也是有点可惜，但是话又说回来，现在已经没啥剧情作出世也是不争的事实，毕竟形势是这个形势，本作要是改成剧情作没把握好估计死的更惨也说不定。</p>
<p>本作无任何选项，一周目结束后自动进去二周目，且并非不同世界线的设计，这点是我比较喜欢的，一周目是大女主アカリ（灯里）线，以男主为视角，二周目是二女主ミク（美玖）线，直接以ミク（美玖）为视角，虽说最后会告诉你这条线大部分剧情都是非真实存在的，但是通过与一周目不同的视角，其实补充了一些配角的刻画，比如前辈リン（凛）和妹妹ヤエカ（八重花）——事实上也就只有这两个角色有补充刻画，因为其他角色基本就没出场。</p>
<p>一周目アカリ（灯里）线一共 8 章，也是我认为写的最好的部分，虽然不对我的 xp，但是玩下来アカリ还是很不错的，角色性格全程都很稳定，虽然没有什么特别明显的弧光，但是无功无过本就是一种美德。说起来我一开始还觉得アカリ应该不会就塑造的这么单纯，可能后面有反转，结果发现真的就是单纯的ポンコツ<s>但是射击专精，这两个要素组合起来很难不让人想起野比大雄</s>。</p>
<p>二周目ミク（美玖）线 4 章，因为在剧情安排上有和一周目大量重复的部分，所以都一笔带过，实际两条线的容量应该还是有差距，不过这里也是我想表扬剧本的地方，没有为了显得平衡也搞个 8 章，如果真这么干了我估计就要开骂了。二周目在我看来主要还是用来补充一些额外的视角和设定，但是又没有脱离一周目剧情太多，所以其实不太有趣（剧本估计也是知道这点，第四章后半段直接一转毕业，时间流速令我发指），再加上人物ミク对我来说也不讨喜，所以这一部分很难给什么好评价。</p>
<p>ミク（美玖）线打完进的是后日谈性质的收尾，在我看来这部分相当画蛇添足，其实用这部分给配角加点戏份没准会更好，不知为何编剧没有这么做。</p>
<p>其实我个人觉得在配角里，无论是前辈リン（凛）还是妹妹ヤエカ（八重花）都比二女主ミク（美玖）更好，只能说是剧情上的考量吧，毕竟ミク这个角色就像是给剧情服务的（甚至无论剧里还是剧外），至少个人觉得塑造不讨喜，而且最关键的是缺乏动机，剧情从头到尾就没交代ミク为什么喜欢男主，感觉就像“作者卿已经决定了，你来当后宫”，这就让玩家缺乏和角色共情的契机，可能也是这个角色不讨喜的原因。</p>
<p>整体剧情看下来，不合理的地方肯定是有不少，首先由于本作的设定，存在不少军械，本人不是军械迷，但即使是这样很多地方我还是觉得一眼不合理的地方，其次是剧情的很多发展比较牵强，说白了还是因为本作明明有这样一个本该严肃的背景却不走剧情作的路，剧本往往在这种地方突然塞进来废萌，给人感觉就好像编剧跟我打个哈哈就过去了，多少让人有些不爽。</p>
<p>不过既然不是剧情作倒也没必要太严格，不带脑子看的话上给人印象好的记忆点还是有的，比如アカリ（灯里）线的结尾，被逼到穷途末路的二人，望着天上绽出的照明弹，明明二人都从未见过烟花，アカリ却笑着说：“就把这当作烟花吧，那么现在就是传说中的烟火大会约会了！”。<br>
<img src="https://kokurasona.github.io/post-images/1739027217397.JPEG" alt="" loading="lazy"><br>
二人就这样沐浴在“烟花”和星光之中，在最后的时间里诉说着心中最真实的情感，抱着对这个颓疲的世界的感谢，一同喊出：“生まれてきてくれて、ありがとう！”<br>
<img src="https://kokurasona.github.io/post-images/1739027278376.jpeg" alt="" loading="lazy"><br>
<img src="https://kokurasona.github.io/post-images/1739027291159.JPEG" alt="" loading="lazy"><br>
说实话这段真的加分不少，单拎这段出来的话也算是中成，再加上之前的塑造和背景加成，以及少许本人的情绪加成，让这段成为了我心中アカリ（灯里）线的点睛之笔。</p>
<p>整体看下来，比较值得诟病的点就是可攻略路线太少，以及对二号女主ミク（美玖）的塑造明显不足，其实这两个点就是同一个问题，编剧的处理肯定是有问题的，从全篇有些跳脱和零散的故事节奏来看，无外乎两种情况：一是编剧能力不足，没有能力写好一个完整的故事（因为虽然是两条角色线，但是实际上是整合在同一个故事中的，这样就比较考验编剧的整合水平），二是剧本应要求有多次改动，导致叙事节奏断裂，角色塑造不佳，在我看来两种情况应该都有，本作部分剧情的结构让我觉得编剧其实是有些想法的，但是有些部分又感觉完全是没有思路的想法，再加上本作发售有延期，我觉得我的想法应该是没什么问题的，不过我也没玩过编剧的太多其他作品，所以我也不想把话说死，只停留在猜测的层面上就好。</p>
<h3 id="碎碎念">碎碎念</h3>
<p>本作明明是有 ed 曲的，而且曲子质量普遍都可以，但是居然没有做一个 ed，让我有点不爽，尾声结束后直接出了“おしまい”：<br>
<img src="https://kokurasona.github.io/post-images/1739027343508.JPG" alt="" loading="lazy"><br>
主角团所属的警卫队的帽子摆在一旁，这个结尾图让我想起了《路人女主的养成方法》的完结图——惠的白色贝雷帽挂在「し」字上。同样都是帽子，比起《路人女主》中白色贝雷帽蕴含的意味，本作的帽子出现在这里就显得像是缺少象征元素时强行加上的一点点缀，也再次反映了本作剧本的薄弱之处。<br>
<img src="https://kokurasona.github.io/post-images/1742710191717.png" alt="" loading="lazy"></p>
<h3 id="尾巴">尾巴</h3>
<p>不知道有没有很多人跟我一样，觉得妹妹ヤエカ没有一条线很可惜的，要是能有个妹妹 if 线我都不敢想有多爽，要说真是退环境了吗，这两年讨人喜的妹妹角色却只能当背景板的作品疑似有点太多了。<br>
<img src="https://kokurasona.github.io/post-images/1739027350479.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CATIA 无法打开文件：“使用教育许可证创建了文件” 解决方法]]></title>
        <id>https://kokurasona.github.io/post/DVwyvFPmc/</id>
        <link href="https://kokurasona.github.io/post/DVwyvFPmc/">
        </link>
        <updated>2024-09-04T12:32:45.000Z</updated>
        <content type="html"><![CDATA[<p><em>太长不看版：极可能并不是所谓教育许可证的问题，而是老版本的 CATIA 无法识别新版本 CATIA 导出的文件。</em></p>
<h3 id="背景">背景</h3>
<p>之前使用 CATIA 导入某个文件时，遇到警告“使用教育许可证创建了文件”，无法打开，基于这个提示，在网上找了一整圈解法均无效，最后机缘巧合发现了问题所在，在此分享给同样被此问题困扰的人。</p>
<h3 id="分析">分析</h3>
<p>其实这个提示本身就挺让人摸不着头脑的，首先“使用教育许可证创建了文件”这个提示的前提就难以存在，因为使用教育许可证的 CATIA 是<strong>无法导出文件</strong>的。既然无法导出文件，又何谈使用教育许可证创建的文件呢？</p>
<p>网上提到的最多解法，是取消勾选几项 License，但实际上这个方法只是让 CATIA 不使用教育许可证，并不能解决无法打开的问题，属实是本末倒置了。<br>
<img src="https://kokurasona.github.io/post-images/1725453622920.png" alt="" loading="lazy"></p>
<h3 id="解法">解法</h3>
<p>正如开头所说，实际上的原因极有可能是老版本的 CATIA 无法识别新版本 CATIA 导出的文件，CATIA 输出的这个提示完全是干扰项，跟教育许可证是八杆子打不着的。</p>
<p>既然知道了原因，那解法就很简单了——下载对应版本的 CATIA 即可，这自然是句正确的废话，如果你知道导出对应文件的 CATIA 版本，那后面的部分也没必要看了，但是倘若你不知道手里的文件是使用什么版本的 CATIA 导出的，可以参照这个方法：</p>
<p>1.把文件的 .catpart 后缀名改成 .txt。<br>
2.用记事本打开，按 CTRL+F 使用查找，搜索关键词“V5R”。<br>
3.搜索结果中紧跟在 V5R 后面的内容即为版本号，比如“…V5R21SP0…”，对应的就是 21 版的 CATIA。</p>
<p>至此，问题解决。</p>
<h3 id="多版本共存">多版本共存</h3>
<p>最后简单讲一下 CATIA 多版本共存的问题，如果你和我一样需要同时使用多个版本的 CATIA，可以使用下面这个方法：</p>
<p>0.确保你已经安装了多个版本的 CATIA。<br>
1.按 Win+R，输入 %APPDATA%，回车，在 Roaming 目录下，找到 DassaultSystemes 文件夹，删除。<br>
2.返回上层目录，进入 Local 文件夹，找到 DassaultSystemes 文件夹，删除。<br>
3.在开始菜单找到 CATIA 文件夹，找到任一版本的 Environment Editor，右键以管理员身份运行，打开后会弹几个提示，全部确定即可。<br>
4.在环境编辑器里可以看到多个版本的 CATIA，先点击其中一个版本，在下方找到环境变量 CATUserSettingPath，右键选编辑变量，在已有值后面加版本数字，<strong>确保每个版本的环境变量不同即可</strong>。<br>
5.编辑环境变量 CATTemp，方法同上。<br>
6.如法炮制，修改每个版本的环境变量 CATUserSettingPath 和 CATTemp。</p>
<p>至此，多版本已经可以共存了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从睡眠解锁闪屏聊起，聊聊令人哭笑不得的 Mac 键盘]]></title>
        <id>https://kokurasona.github.io/post/sZtZMNPQt/</id>
        <link href="https://kokurasona.github.io/post/sZtZMNPQt/">
        </link>
        <updated>2023-06-13T08:32:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>前些天，早就对 Mac 垂涎三尺的室友终于痛下决心购入了一台跟我同款的 M1 MacBook Air，没想到在使用一段时间后发现了一个奇怪的问题：正常来说，在 MacBook 进入睡眠的情况下，由于此时 Touch ID 不工作，需要先「按下」Touch ID 键，此时 Touch ID 激活，识别指纹，解锁电脑。这个逻辑链条是非常清晰的，但是我室友的 MacBook 在按下 Touch ID 后，屏幕会先亮起，然后很快黑屏然后再亮起（视觉上看起来就像是“闪屏”），需要再将手指放上去再次识别后才能解锁。</p>
<p>很奇怪是不是？因为是同款，我也在我电脑上试了试，并没有发现这种奇怪的情况。为了搞明白到底是什么情况，我们开始了一番探索。</p>
<h3 id="软件问题">软件问题？</h3>
<p>首先想到的自然是 Mac 自从 Bug Sur 开始层出不穷的软件 bug 导致的，重装解决 99% 的问题，我直接让室友重装系统，但是在一个下午的重装之后，该问题依旧存在，我们只好寄希望于万能的互联网了。</p>
<p>正所谓遇事不决先百度，我们找到了许多类似的案例，比如这个：<a href="https://discussionschinese.apple.com/thread/251977897">MacBook Pro 16寸唤醒屏幕时会闪一次屏幕</a>，根据时间和描述容易推断得知这位朋友的 MacBook 型号应该是 2019 年 11 月发布的那款 16 寸的 MacBook Pro（也就是 M1 芯片发布之前发布的最后那款剪刀脚键盘的 MacBook Pro），然而下面的回复却只有用“万能”的安全模式启动或者更新系统解决云云。自然，这些方法也无法解决这个问题。</p>
<p>当我一边痛骂 bugOS 一边继续找解决方法时，又在苹果论坛找到了同样提到该问题的帖子：<a href="https://discussionschinese.apple.com/thread/96208">唤醒MacBook pro屏幕会闪动</a>，下面同样也是一些没有用的通用解决方案（无非也就是重置 SMC，NVRAM 等），但是在无意间，我注意到了帖子的发布时间：2016 年 12 月，要知道万恶的 Bug Sur 发布时间可是 2020 年，2016 年还是 Sierra，当年的 macOS bug 不像如今这么多。况且从另一个方面讲，2016 年就有的软件 bug，在 2023 年还没有修复，可能性也很小。<br>
<img src="https://kokurasona.github.io/post-images/1686646299995.png" alt="" loading="lazy"><br>
正在我一筹莫展之际，室友搜到了一篇<a href="https://www.xiaohongshu.com/explore/6369e8400000000008011e1b">小红书</a>上的教程，误打误撞的发现了问题所在。<br>
<img src="https://kokurasona.github.io/post-images/1686646323009.png" alt="" loading="lazy"></p>
<h3 id="硬件问题">硬件问题</h3>
<p>根据这位朋友所说，这个问题完全是用户自己的操作问题，然后给出了一些乍看之下似乎很有道理的解释。但是只要简单想想就知道，倘若真的是用户自己的操作问题，那么为什么同样的操作，在我的机器上却不会复现这个问题呢？直言不讳的说，我认为这位朋友的结论是纯粹的扯淡。<br>
<img src="https://kokurasona.github.io/post-images/1686646336892.png" alt="" loading="lazy"><br>
但是，虽然给出的结论是完全错误的，这并不妨碍其中包含有价值的内容，这位朋友提出的多次触发问题提醒了我们——Mac 上的这颗 Touch ID 按键，同时也兼顾了锁屏的功能。也就是说，难道在手指按下的过程中，先触发了解锁功能，然后又再次被“按下”。触发了锁屏功能？这也很符合这个问题的实际表现，即“闪屏”。</p>
<p>室友接下来的发现再次印证了这个猜测：在他的机器上，用手指按压 Touch ID 按键边缘的时候，这个问题没有出现。</p>
<p>一时间，我如醍醐灌顶——也就是说，这很可能是一个硬件设计缺陷。之前的种种线索都连了起来：无论是第一个案例中的 19 款 16 寸 MacBook Pro，还是 16 年发布的第二个帖子（也就是说，他的 MacBook 大概率是 2016 年发布的第一款搭载 Touch ID 的 MacBook Pro），以及我室友的 M1 MacBook Air，都是采用了相同的 Touch ID 按键设计！这个按键设计出现在 2016 至 2020 年间所有搭载 Touch ID 的 MacBook 机型，甚至 13 寸 的 MacBook Pro 至今还在沿用这个设计。也就是说，大概率所有采用这个设计的 Touch ID 都有概率遇到双触发问题，这应该是一个设计缺陷。令人疑惑的是，我居然没有在网上看到任何类似的观点，这就是创作本文的其中一个原因。</p>
<p>而从 21 年发布的 MacBook Pro 起，苹果换用了类似于 Magic Keyboard 上的 Touch ID 按键设计，我询问多位使用新款 Touch ID 按键的朋友，均表示没有遇到这种问题，所以我猜测这个设计缺陷应该只存在于老款 Touch ID 上。当然，可能是样本量太少，如果你用新款按键也会遇到这个问题，欢迎联系我。</p>
<h3 id="键盘与理念之争">键盘与理念之争</h3>
<p>接下来顺便聊聊 Mac 的键盘。</p>
<p>相信熟悉 Mac 的朋友都知道苹果从 16 年开始对 MacBook Pro 的许多设计进行了一次大的调整，包括但不限于：换掉了备受赞誉的 MagSafe 充电口和其他接口，全面拥抱雷电接口、将 Function 键区改成了 Touch Bar、以及，最饱受诟病的：从剪刀脚键盘换成了蝶式键盘。<br>
<img src="https://kokurasona.github.io/post-images/1686646490960.png" alt="" loading="lazy"><br>
这些改动都饱受争议。例如 Touch Bar，我甚至不知道其存在的意义与作用到底为何，就如同我不知道如今没有 Face ID 却做成刘海屏的 MacBook 意义在哪里。但是，如果只是 Touch Bar 或是全雷电接口的话，苹果本可以继续一意孤行，直到强迫用户适应它们，正如他们曾经做的那样。但是，真正强迫苹果做出改变的，是蝶式键盘。</p>
<p>蝶式键盘出现的那一刻，口碑便极度两极分化。对于苹果来说，也许 Touch Bar 和全雷电接口是出于商业上的考量，为变而变，但是只有蝶式键盘，我敢说绝对是苹果的得意之作。蝶式键盘是富有「果味」的产品，它在一定程度上反映了 Jony Ive 与苹果的设计理念：纤薄。在 Jony Ive 时代，苹果始终以纤薄为美。</p>
<p>而同样也是蝶式键盘，将苹果拖下泥潭，四年迭代四次，花费了无数人力和财力，最终，同样是出于商业上的考量，20 年苹果宣判了蝶式键盘的死刑，21 年，实体 Function 键和 MagSafe 悉数回归，就这样，苹果一人孤舞了足足 5 年后，最终又回到了原点。22 年，Jony Ive 正式与苹果解除合作关系，Ive 时代就这样终结了。</p>
<p>这次的失败实际上也反映了后 Ive 时代的设计理念与现实之间不可调节的矛盾：一如 Intel 芯片的 MacBook、一如 Apple Watch Edition，当然，还有蝶式键盘。</p>
<p>不破不立，对于前两个失败的设计，苹果已经交出了答卷：M 芯片的 MacBook，以及 Apple Watch Ultra。而键盘，剪刀脚未必是最终答案，也许苹果会带着全新设计的键盘归来，一如既往。毕竟，苹果是一家记仇的公司。</p>
<h3 id="稀缺的第三方键盘市场">稀缺的第三方键盘市场</h3>
<p>最后说说最近遇到的一个问题，即 Mac 的第三方键盘。</p>
<p>即便一拖再拖，最终还是到了给 Mac 挑一套舒服外设的时候。作为坚定的薄膜键盘拥簇，我本来以为键盘这种东西最多一百块钱就可以了事，但是我实在是没想到，这么多年了，市面上居然几乎没有真正意义上的 Mac 第三方键盘。这里要点名批评某 Keychron K2，整天铺天盖地的推荐，说什么最适合 Mac 的键盘，看到我都觉得机械键盘也不是不能用的时候，点进去一看，连键位都完全不一样，活生生的通用键位，这也好意思大言不惭地叫最适合 Mac 的键盘？我都不知道这些人是怎么好意思推荐的，难道诸位都是买 Mac 装 Windows？</p>
<p>在看了一堆“专为 Mac 设计”的通用键位键盘后，发现只有罗技家的 MX Keys for Mac 是正儿八经的 Mac 键位，考虑到我个人不喜欢小键盘，所以 MX Keys Mini for Mac 就是最适合的选择……直到我看了一眼价格，这个价格都能直接买到苹果官方的全新 Magic Keyboard 了。在下实在是囊中羞涩，于是我又再次陷入了纠结。</p>
<p>结果在一次偶然的机会，闲鱼给我推了一代 Magic Keyboard，说真的，要不是闲鱼推送，作为一个老果粉，我都快忘了还有这玩意。简单查了一下发现非常符合我的需求（毕竟就是官方键盘……），干电池供电设计对我来说更是加分项。于是我在闲鱼上花了 80 大洋淘来了 这么一把<s>女生自用99新</s>老古董，揭开基本要与键盘融为一体的战损键盘膜并简单擦洗后，一把成色几乎全新的键盘出现在了我的面前（在这里墙裂感谢这些为了我们这些二手用户考虑而每天贴膜带壳使用的好心人）。如果你跟我需求差不多的话真的可以考虑一下，我是真的觉得香。<br>
<img src="https://kokurasona.github.io/post-images/1686646520894.png" alt="" loading="lazy"><br>
关于 Mac 第三方键盘问题，这里推荐少数派的一篇文章：<a href="https://sspai.com/post/79608">找一把完美适配 macOS 的第三方键盘，为什么那么难？</a></p>
<h3 id="尾巴游离于-apple-生态圈边缘的-mac-与个人计算终端的未来">尾巴：游离于 Apple 生态圈边缘的 Mac 与个人计算终端的未来</h3>
<p>如果说苹果产品线里我最喜欢哪个产品，那一定是 Mac，独特的体验和对细节的把控在第一次上手后就让我印象深刻。然而，笔记本电脑作为上一个世代的个人计算终端，在如今已然没有那么受重视，无论是 Windows on Arm 的惨淡，还是 macOS 如今的 bug 百出，似乎都预示着它们已然跌入一个困局。倘若你深度体验过苹果构建出来的生态圈，你就能明显感觉到 Mac 早已不再位于核心位置，而是游离于生态的边缘，若即若离。而随着下一个世代的到来，手机是否也会有一天消失在普罗大众的视野中呢，这不禁让人畅想下一代计算终端的到来。站在时代的转折点上，实在是令人又紧张又激动。</p>
<p>写这篇文章的时候，正值 2023 年的 WWDC 举办期间，苹果已然交出了一份答卷，然而这套考题并没有标准答案，苹果的 Vision Pro 会成功吗，也许未必。毕竟在道路尚不明晰的当下，就连苹果也只能摸黑前行。最大的电池问题还没有解决，2 小时的续航根本不堪一用，昂贵的售价也让普通消费者望而却步。或许这款产品最大的意义也许在于其“存在”。在一片凝固的沉郁之中，掀起一阵小小的波澜，试图重现曾经那个百花齐放的时代。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[透过社会学的一角，浅看人类性行为]]></title>
        <id>https://kokurasona.github.io/post/1lQWTR4MV/</id>
        <link href="https://kokurasona.github.io/post/1lQWTR4MV/">
        </link>
        <updated>2022-10-31T06:55:26.000Z</updated>
        <content type="html"><![CDATA[<p>从生物学的角度来说，性行为不过是生物进行繁衍的一种手段，从这个角度看性行为不过是生物学中平平无奇的一环，但如若以社会学的角度来看待性行为，尤其是人类性行为，其便变得不再普通，越是强调社交为主的动物，其性行为中的社交属性便越是突出，这也是本文的主题——从社会学的角度来看待人类性行为。</p>
<p>人类性行为可以涉及到一个人的方方面面，从本文的角度来看，社会层面、心理层面和认知层面是较为重要的。通常来说，二人性行为往往能加强二人之间的情感联系并减轻人的不安全感，性行为同时也是维持关系的纽带，但是性行为还要很重要的一点功用，即能够起到自我实现（抑或说是自我认同）的作用。</p>
<p>美国社会学家查尔斯·库利曾经说过：“我不是你以为的我；我不是我以为的我；我是我以为你以为的我”，这便是他的“镜中自我”理论，人的行为认知及改变离不开社交对象的反射，而对这所谓的反射的观测又是人主观意识上的，即只是臆测罢了。一个人所产生的意义必然来自他人，而并不能独立实现。从这个角度看，人类性行为便是一种自我实现的手段，通过从事在性行为中的自我投射来满足自我。一些强调特殊性互动的性行为，例如BDSM或角色扮演等，便是通过在这样的行为中投射自我来获得积极性，在BDSM中，人们进行支配与臣服行为以成为情感与献身的投射对象，在这之中构建出的环境虽然是虚构的，却能够影响现实。毫无疑问，人的自我认同需要这种人的相互投射，而这种性行为关系正是在这种互相投射的需要中诞生的，从这个角度来看，性行为带有明显的各取所需的色彩。</p>
<p>二人及以上的性行为中呈现强烈的社会性，那么单人性行为又如何呢？我认为在其动机和行为中同样有社会性的踪迹可循，例如说一个尚处于青春期的人，在平日里的社交活动中被异性（或同性）的行为唤起了性欲，进而产生了性兴奋从而自慰，那这同样是一种社会性的表现，而且也是一种自我投射。再比如，很多人自慰时可能会通过观看一些色情影像来制造性兴奋，为了增加兴奋度，他们可能会将自己投射到影像中的人物中去，这就是一种间接的投射。一些人可能会使用与自己幻想中性对象有关的物品进行自慰，这其中有强联系的，例如照片，随身衣物等，也有弱联系的，范围宽广到几乎没有边界，其原因便是这种性行为建立在一种自我投射之中，凡是“自认为”与幻想中性对象有联系的物品均可行使该职能。</p>
<p>至此，不难看出，人的性行为表现上虽然是物理性的，但究其原因还是在于精神层面。就此来讲，说人活在幻想之中也不为过，毕竟谁能证明自己不是活在自己脑中（抑或是他人脑中？）呢，人终归是社会的动物，即使拥有知性，也难免会受到野性的干扰，而性行为作为人的一种特殊行为，便是倾倒于野性一边的，这样说可能有些可笑，但是私以为现代人所拥有的诸多性癖及其性行为无疑是给野性插上了思辨科学的翅膀。不管怎样，人难以脱离性行为，正如同人类难以脱离社会一样，是因为我们尚处于荒野之中，同时也是因为人活在理所当然又荒诞不经的现实当中，而自我认同是构筑人的社会性所不可或缺的。</p>
<h1 id="后日谈">后日谈</h1>
<p>动笔写出这篇杂文，本是为了应付一门考试，但是在构思过程中产生了一些想法，因而就有了本文。权当是我个人的一点想法吧，我觉得还是挺有趣的。</p>
<p>这次将其传上来，其实只是为了<s>水一篇文章让我博客看起来内容比较多</s>，因为懒，并没有对原文进行扩充，只是作了少量的修改。其实我对本文内容还尚未满意，因为受限于考试时间，有很多想法仍然没有表述出来，本来还想谈谈其他一些比较小众及部分比较血腥的性癖（笑），但是我暂时也没有自我解剖的兴趣（也许自我解剖也可以是一种性癖，可惜我暂时还没有，嗯），所以姑且就这样搁置吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用 ClashX Pro，加速你的 Switch]]></title>
        <id>https://kokurasona.github.io/post/Oa-JnB-qx/</id>
        <link href="https://kokurasona.github.io/post/Oa-JnB-qx/">
        </link>
        <updated>2022-08-10T07:18:56.000Z</updated>
        <content type="html"><![CDATA[<p><em>注：理论上下文内容同样适用于 PlayStation、Xbox 等主机。</em></p>
<h1 id="前言">前言</h1>
<p>作为一个不怎么打游戏的人，做梦也不会想到我会在 2022 年入坑一台 2017 年发布的游戏机，并死心塌地了给任地狱上供了不少钱，但是随着玩的越发深入，非国行 Switch 的许多问题也暴露出来（为什么我一定要强调非国行，难道真的有人买国行吗……），总之，本文旨在针对其中最大的痛点之一，也就是网络连接的问题提出一些解决方法，希望对各位有所帮助。</p>
<h1 id="原因">原因</h1>
<p>原因其实不必多说，作为一款国行与非国行有着明显差异的主机，自然没有考虑到国内的网络环境，再加上任地狱的联机方式基本都是P2P（为了省服务器的钱真是太拼了.jpg），导致体验非常差，这种体验差主要体现在两方面：</p>
<ul>
<li>游戏下载速度过慢</li>
<li>线上联机体验差</li>
</ul>
<p>大部分国内玩家遇到这种问题基本都是花钱买加速器解决，但是迫于囊中羞涩，我肯定是不会买<s>买不起</s>加速器的，不过我很快找到了方法解决这个问题。</p>
<h1 id="分析">分析</h1>
<p>想要解决这两个问题还是比较简单的，思路就是只要能让电脑的代理工具代理 Switch 的网络，那不就跟在国外用 Switch 一个体验了吗，也就是说，只要我们让担当旁路由一职就可以了。</p>
<p>在开始之前多说两句，线上联机体验如何，一个重要指标就是 NAT（Network address translation），Switch 设置里用等级表示，例如我家中的辣鸡移动网直连，NAT 类型显示为 C<br>
<img src="https://kokurasona.github.io/post-images/1660210226386.jpg" alt="" loading="lazy"><br>
根据说明，C 型属于能连但是体验不好的等级。一般来说，想要有良好的联机体验需要 NAT 类型为 A 型或 B 型（A 型最佳），具体可以看<a href="https://www.nintendoswitch.com.cn/support/faq/336.html">官方说明（腾讯）</a>，这也就是我们今天的目标，本文不做原理说明，只展示如何操作。</p>
<p>首先需要确保你的节点支持 UDP 转发，本文用 Mac 上的 ClashX Pro 进行演示，如果你是 Windows 用户，据说 <a href="https://github.com/netchx/netch">Netch</a> 是更好的选择，或者使用 <a href="https://github.com/Fndroid/clash_for_windows_pkg">CFW</a> 理论上可以达到同样的效果。</p>
<h1 id="启用-tun-模式下的-udp-转发">启用 TUN 模式下的 UDP 转发</h1>
<p>想要提升联机体验，最关键的便是实现 UDP 转发，为此我们先启用 ClashX Pro 的增强模式（Enhanced Mode）。</p>
<p><em>注：如果只是想把电脑作为旁路由，并不需要修改配置文件，这样做的具体原因会在后文说明。</em></p>
<p>打开配置文件夹，添加 yaml 文件头（如果机场的给定的配置文件里有类似内容则只需确保添加 tun: 及其以下内容即可）：</p>
<pre><code class="language-yaml">dns:
  enable: true
  ipv6: false
  listen: 0.0.0.0:53
  enhanced-mode: fake-ip
  nameserver:
    - 119.29.29.29
    - 223.5.5.5
    - 1.1.1.1
    - tls://dns.rubyfish.cn:853
  fallback:
    - tls://1.1.1.1:853
    - tls://1.0.0.1:853
    - tls://dns.google:853

tun:
  enable: true
  macOS-auto-route: true
  macOS-auto-detect-interface: true
</code></pre>
<p>下拉到规则部分，添加一行规则：</p>
<p><code>- SRC-IP-CIDR,ns-lan-ip/32,Proxy</code></p>
<p>将 ns-lan-ip 部分替换为 Switch 的 IP 地址，可以在设置-互联网页面看到：<br>
<img src="https://kokurasona.github.io/post-images/1660210692167.jpg" alt="" loading="lazy"><br>
Proxy 部分则替换为对应的代理即可，保存，更新一下配置文件，此时在 Connections 下应该可以看到出现了一个 198.18.0.1 的地址，这里是因为我们使用 fake-ip 的结果，重点看 Type 一栏，显示为 TUN，这证明我们已经成功启用了 TUN 模式。</p>
<h1 id="switch-下的配置">Switch 下的配置</h1>
<p>Switch 下打开设置-互联网-互联网设置-选择对应 Wi-Fi -更改设置，将 IP 地址设置、DNS 设置两项改为手动，其中 IP 地址填 <strong>Switch 的 IP 地址</strong>，子网掩码保持默认的 255.255.255.0，网关和首选 DNS 均填<strong>电脑的 IP 地址</strong>，备选 DNS 随意填（因为用不到）。<br>
<img src="https://kokurasona.github.io/post-images/1660210717298.png" alt="" loading="lazy"><br>
如果你不知道电脑的 IP 地址，可以从 ClashX Pro 下查看<br>
<img src="https://kokurasona.github.io/post-images/1660210749910.png" alt="" loading="lazy"><br>
保存，退出，这时 Switch 应该已经自动连接 Wi-Fi 成功，如果没自动连上手动选择连接此网络。连接成功后看电脑端 ClashX Pro 的 Connections 页面，出现了 Switch 的 IP 地址，Host 部分可见 nintendo.net 字样，可见 Clash 已经成功接管了 Switch 流量，Type 一栏同样显示为 TUN，到这里代表我们应该已经成功。我们跑一下 Switch 的连接测试，此时 NAT 应该已经变为 B 以上……<br>
<img src="https://kokurasona.github.io/post-images/1660210772488.jpg" alt="" loading="lazy"><br>
嗯？怎么 NAT 从 C 变成 F 了……我们一通操作，联机体验怎么反而还下降了……</p>
<h1 id="vmess-协议背大锅">vmess 协议背大锅</h1>
<p>这里我们的操作理论上是没有问题的，但是为什么 NAT 等级下降了？经过一番查找，答案是如果你的节点是 vmess 协议，在这个环节就会出问题，据说是 UDP 转发有问题，看上去除了 vmess 的其他几个协议（Trojan、SS、SSR）都是可以的，于是我立刻换用 SSR 协议的节点，再次跑一下 Switch 连接测试：<br>
<img src="https://kokurasona.github.io/post-images/1660210809773.jpg" alt="" loading="lazy"><br>
可以看到 NAT 成功变为最高的 A 级，这也代表我们成功改善了联机体验，无论是 NAT 等级还是上传下载速度皆有很大提升。</p>
<p>这就是为什么在上文我有一个修改 config 文件的操作，主要是因为我的常用节点都是 vmess 协议的，同时用特定规则 SRC-IP-CIDR 实现了让 Switch 一个设备走 SSR + fake-ip（ 规则 SRC-IP-CIDR 后加 Switch IP 地址，通过这样的方式指定 Switch 设备。具体见下图，可以看到 Switch 流量走了 SRC-IP-CIDR 规则），当然如果你觉得改 config 文件太麻烦可以跳过不做，只要满足上述条件同样可以实现 NAT B+。<br>
<img src="https://kokurasona.github.io/post-images/1660355322821.png" alt="" loading="lazy"></p>
<p>哦对了，拿 Mac 做旁路由还有一个好处，那就是性能管够，这一部分应该是不会掉链子的，如果体验不畅大概率是节点背锅，不过也有可能是无线连接不太行，可以给 Mac 接网线试试。以及说白了加速器大致也是类似的原理嘛，没必要花两份钱，这不是冤大头嘛。</p>
<h1 id="另一种方法">另一种方法</h1>
<p>感觉内容稍微有点少，这里补充另一种更简单的方法，也就是设置代理服务器的方法，这也是网上提到最多的方法，思路很简单，且同样可以通过 ClashX Pro 实现，但是它也是有缺点的，这种方法只能改善网络的传输速度，并不能挽救你的联机体验。</p>
<p>同样打开 ClashX Pro，这时打开的不是增强模式（Enhanced Mode），而是打开允许通过 LAN 连接（Allow connect from Lan），电脑端的操作就结束了，这时打开 Switch，同样进入互联网设置，将代理服务器设置改为开启，填入<strong>电脑的 IP 地址和端口</strong>。<br>
<img src="https://kokurasona.github.io/post-images/1660210851322.jpg" alt="" loading="lazy"><br>
同样，不知道电脑的 IP 地址和端口号的可以从 ClashX Pro 下查看。<br>
<img src="https://kokurasona.github.io/post-images/1660210749910.png" alt="" loading="lazy"><br>
跑一下网络测试，可以看到上传下载速度均有提升，但是 NAT 等级岿然不动。<br>
<img src="https://kokurasona.github.io/post-images/1660210933086.jpg" alt="" loading="lazy"><br>
因此这种方法只能用来提升游戏的下载速度，个人是不太推荐的，不过这个方法对节点没什么要求，节点不合要求的可以用这种方法。</p>
<h1 id="总结">总结</h1>
<p>虽然这篇文章是 8 月 10 号写的，但是因为忘了写惯例的总结，所以这里是 11 号写的，说实话……感觉没有什么可以总结的，昨晚任地狱也是开了 Splatoon 3 的迷你直面会，还有大概两周多的时间 Splatoon 3 的前夜祭（试玩）就要开了<s>现在感觉全身有鱿鱼在爬</s>，感觉这篇文章写的时间很不错，总之希望本文能够帮到你。</p>
<p><strong>2023 年 5 月 9 日更新：</strong> 最近逛论坛的时候看到有人提到优化 Splatoon 3 的一种思路，可以有效优化联机体验，操作如下：</p>
<p>打开配置文件夹，修改对应配置文件，在规则部分添加如下规则：</p>
<pre><code class="language-yaml">- DOMAIN-SUFFIX,npln.srv.nintendo.net,DIRECT
- DOMAIN-SUFFIX,n.n.srv.nintendo.net,DIRECT
- DOMAIN-SUFFIX,nintendo.net,Proxy
</code></pre>
<p>其实思路很简单，联网检查（nintendo.net）流量走代理，而 P2P 流量不走代理，这样可以既保证不掉线又不提高游戏延迟，确实是很巧妙的做法。而且本方法应该不需要节点的 UDP 转发，不挑节点。</p>
<p>最后骂一句任地狱，猜到喷 3 联机体验会差，没有想到这么差，修修你那破网吧任天堂！<br>
<img src="https://kokurasona.github.io/post-images/1683619779925.JPG" alt="" loading="lazy"></p>
<p>参考：</p>
<p><a href="https://github.com/Dreamacro/clash/issues/971">请教TUN模式下UDP转发 · Issue #971 · Dreamacro/clash</a></p>
<p><a href="https://github.com/vernesong/OpenClash/issues/1997">TUN下以及兼容模式打开UDP转发下，Switch NAT F · Issue #1997 · vernesong/OpenClash</a></p>
<p><a href="https://github.com/vernesong/OpenClash/issues/1076">PS4 怪物猎人 无法联机 · Issue #1076 · vernesong/OpenClash</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iTerm2 配置详解——打造赏心悦目且易用的 Mac 终端]]></title>
        <id>https://kokurasona.github.io/post/6QTYAEfdJ/</id>
        <link href="https://kokurasona.github.io/post/6QTYAEfdJ/">
        </link>
        <updated>2022-02-06T02:40:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>说来惭愧，每每当我因为各种原因不得不重制电脑时，做好充分备份工作的我却一次又一次的忘记给 iTerm2 配置做备份，而这样的疏忽大意导致的后果——如果这也能称得上是后果的话——就是我不得不一次又一次的重新去网上找 iTerm2 的配置教程。终于，在我又一次忘了给 iTerm 做备份而不得不重复这个令我崩溃的步骤时，我决定写一篇配置教程以绝后患。</p>
<h1 id="展示">展示</h1>
<p>考虑到人和人的审美毕竟还是不同的，所以我们废话少说，先上成品：<br>
<img src="https://kokurasona.github.io/post-images/1644204369143.png" alt="" loading="lazy"><br>
OK，如果你觉得这个最终效果符合你的审美的话，那么就继续往下看。</p>
<h1 id="安装-iterm2">安装 iTerm2</h1>
<p>当然，第一步是<a href="https://iterm2.com/">下载 iTerm2 </a>并安装<br>
<img src="https://kokurasona.github.io/post-images/1644149682273.jpg" alt="" loading="lazy"></p>
<h1 id="配置">配置</h1>
<p>首先设置 iTerm2 为默认终端<br>
<img src="https://kokurasona.github.io/post-images/1644149989131.png" alt="" loading="lazy"></p>
<h1 id="将默认-shell-换为-zsh">将默认 Shell 换为 zsh</h1>
<p>先查询系统中所有的 shell</p>
<p><code>cat /etc/shells</code><br>
<img src="https://kokurasona.github.io/post-images/1644150124127.png" alt="" loading="lazy"><br>
一般而言 Mac 的 Terminal 用的 Shell 是 bash，现在将其换成 zsh</p>
<p><code>chsh -s /bin/zsh</code></p>
<h1 id="安装并配置-oh-my-zsh">安装并配置 oh-my-zsh</h1>
<h2 id="安装-oh-my-zsh">安装 oh-my-zsh</h2>
<p>oh-my-zsh 是一款基于 zsh 的，由社区驱动的命令行工具，我们接下来的很多配置要依赖其实现。</p>
<p>使用 curl 安装：</p>
<p><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p>
<p>或使用 wget 安装：</p>
<p><code>sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</code></p>
<p>如果你连不上 GitHub，也可以使用镜像站 https://gitee.com/mirrors/oh-my-zsh/blob/master/tools/install.sh 将上述安装方式的网址替换为这个即可。</p>
<h2 id="修改主题">修改主题</h2>
<p>在 iTerm2 中输入 <code>vim ~/.zshrc</code></p>
<p>找到 ZSH_THEME 一行，将其修改为 <code>ZSH_THEME=&quot;agnoster&quot;</code></p>
<p>当然，你也可以修改为其他主题，不过后续配置操作可能会有所不同。<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes">主题参考</a></p>
<p>这个主题需要加载特定的字体，点击下载 <a href="https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf">Meslo</a> 字体，双击将字体安装至系统字体册。</p>
<p>打开 iTerm2 设置，Profiles -&gt; Text -&gt; Font，选择 Meslo LG M for Powerline，Regular，字号我这里选的是 12。<br>
<img src="https://kokurasona.github.io/post-images/1644150241460.png" alt="" loading="lazy"></p>
<h2 id="修改配色方案">修改配色方案</h2>
<p><a href="https://ethanschoonover.com/solarized/">下载 Solarized</a>，解压。</p>
<p>还是在 iTerm2 的设置里，Profiles -&gt; Colors -&gt; Color Presets... -&gt; Import<br>
<img src="https://kokurasona.github.io/post-images/1644150267819.png" alt="" loading="lazy"><br>
导入之前解压好的文件夹中的 Solarized Dark.itermcolors 文件，导入完成后并不会自动更换，需要手动选择更换。</p>
<h2 id="安装自动命令提示插件">安装自动命令提示插件</h2>
<p>在 iTerm 2 中输入：</p>
<pre><code class="language-shell">cd .oh-my-zsh/custom/plugins
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
</code></pre>
<p>一目了然，这一步是为了将 zsh-autosuggestions 插件下载到 oh-my-zsh 到插件目录下。</p>
<p>输入 <code>vim ~/.zshrc</code>，找到 plugins 一行，默认是这样：</p>
<p><code>plugins=(git)</code></p>
<p>将其修改为：</p>
<p><code>plugins=(git zsh-autosuggestions)</code></p>
<p>到这里 zsh-autosuggestions 插件就已经安装完了，重启 iTerm2 即可生效。</p>
<p>PS：细心的朋友可能会发现自动命令提示有一些问题，我会在后文提供解决方案。</p>
<h2 id="安装语法高亮插件">安装语法高亮插件</h2>
<p>这里使用 Homebrew 安装 zsh-syntax-highlighting 插件，没装 Homebrew 的可以参考这篇文章安装：<a href="https://www.cnblogs.com/joyce33/p/13376752.html">mac下高效安装 homebrew 及完美避坑姿势</a></p>
<p><code>brew install zsh-syntax-highlighting</code></p>
<p>安装完成后注意会提示一个命令，形如：</p>
<p><code>source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></p>
<p>然后还是 <code>vim ~/.zshrc</code> 打开配置文件，将刚刚提示的命令插入配置文件中。</p>
<p>输入命令加载插件：</p>
<p><code>source ~/.zshrc</code></p>
<h1 id="给-vim-及-ls-配色">给 Vim 及 ls 配色</h1>
<h2 id="配置-vim-颜色">配置 Vim 颜色</h2>
<p>用 cd 命令移动到之前下载解压好的 solarized 文件夹的 /solarized/vim-colors-solarized/colors 目录，输入：</p>
<pre><code class="language-shell">mkdir -p ~/.vim/colors 
cp solarized.vim ~/.vim/colors/
</code></pre>
<p>输入 <code>vim ~/.vimrc</code> 打开vim配置文件，插入以下三行配置：</p>
<pre><code class="language-shell">syntax enable
set background=dark
colorscheme solarized
</code></pre>
<h2 id="配置-ls-颜色">配置 ls 颜色</h2>
<p>这部分就很简单了，老样子 <code>vim ~/.zshrc</code> 打开配置文件，插入：</p>
<pre><code class="language-shell">export CLICOLOR=1
export LSCOLORS=exfxcxdxbxegedabagacad
</code></pre>
<p><strong>注意将该命令置于底端，不然可能会被覆盖而无法正确执行</strong><br>
配色方案可自定义，具体来说就是通过修改 LSCOLORS 后的内容进行修改，想要自定义颜色的<a href="https://geoff.greer.fm/lscolors/">点这里</a>。</p>
<h1 id="调整-iterm2-及-status-bar-设置">调整 iTerm2 及 Status Bar 设置</h1>
<p>打开 iTerm2 设置，Profiles -&gt; Session -&gt; Miscellaneous，勾选底部的 Status bar enabled。<br>
<img src="https://kokurasona.github.io/post-images/1644150402276.png" alt="" loading="lazy"><br>
点击旁边的 Configure Status Bar<br>
<img src="https://kokurasona.github.io/post-images/1644150416994.png" alt="" loading="lazy"><br>
选择你想要添加的 Component，然后把底部的🌈Auto-Rainbow 选项设为自动。</p>
<p>接下来进入 Appearance 选项卡，在 General 中将 Theme 修改为 Minimal 以实现顶栏沉浸的效果，再将 Status bar location 选择为 Bottom，让其在底部显示。<br>
<img src="https://kokurasona.github.io/post-images/1644150445957.png" alt="" loading="lazy"><br>
可能还有写朋友记得我之前提到过自动命令提示有些问题，这里有一个小坑，即自动弹出的提示颜色和背景颜色完全一致，导致根本看不见命令提示，知道了问题所在解决起来就很简单了，直接在 Profiles -&gt; Color -&gt; ANSI Colors 中修改 Black 行 Bright 列的颜色即可。<br>
<img src="https://kokurasona.github.io/post-images/1644150672664.png" alt="" loading="lazy"><br>
但是——这里要说但是——请注意，Vim 的配色也是与之有关的，结果便是如果修改的颜色过于明亮就会导致在 Vim 中看不清字，这里我的解决方法比较简单粗暴，找了一个既能看得清也不至于遮挡字的颜色，我用的是 <code>304243</code></p>
<p>到此为止所有的配置就结束了，有些配置可能需要重启 iTerm 才能生效，无论如何，enjoy it!</p>
<h1 id="总结">总结</h1>
<p>说实话，一个简单的 iTerm2 配置，里面的坑还是有不少的，我也是有了前几次的经验才找到了一套相对好用的方案，从这个角度来说每次忘记备份配置也许不算坏事，<s>但是我也不想再经历一次了</s>，总之希望对你能有所帮助。</p>
<p>参考：</p>
<p><a href="https://www.jianshu.com/p/405956cdaca6">ITerm2配置-让你的mac命令行更加丰富高效</a></p>
<p><a href="https://sspai.com/post/63241">iTerm2 配置和美化</a></p>
<p><strong>注：安装 iTerm2 一节中出现的图取自 <a href="https://iterm2.com/">iTerm2 官网</a>，版权归 iTerm2 官方所有。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 同步失败？谈谈我的解决办法]]></title>
        <id>https://kokurasona.github.io/post/Ux6xKOeOx/</id>
        <link href="https://kokurasona.github.io/post/Ux6xKOeOx/">
        </link>
        <updated>2021-07-27T08:38:11.000Z</updated>
        <content type="html"><![CDATA[<p><em>注：Gridea 已于 2022 年 5 月 17 日发布 0.9.3 版本，解决了本文所提到的同步问题，因此本文可能已过时而变得不再实用。</em></p>
<h1 id="前言">前言</h1>
<p>去年，我写了一篇文章【10 分钟教你创建个人网站——傻瓜式的网站搭建教学】，介绍如何运用 GitHub Pages 和 Gridea 搭建一个个人网站，时光飞逝，在我忙于应付高考的这一年中，也发生了不少事情。当我高考结束准备再创作的时候，我发现一个极其尴尬的问题—— Gridea 不能用了！<br>
<img src="https://kokurasona.github.io/post-images/1627384354752.png" alt="" loading="lazy"><br>
（如图，Gridea 在点击同步按钮后，显示“同步发生了错误”）</p>
<h1 id="寻找原因">寻找原因</h1>
<p>我意识到，可能是一年多没用了，版本太低才出现了这个问题，于是我一波操作打开 Gridea 官网，心说去年写那篇文章时我用的版本是 0.9.2，这么长时间想必更了不少版本吧——<br>
<img src="https://kokurasona.github.io/post-images/1627384364649.png" alt="" loading="lazy"><br>
好家伙，一个版本都没更，这条解决方法算是没了，无奈，我打开 Gridea 的 issue ，简单一翻，果然有不少人有跟我一样的问题。这时我突然想到，Gridea 是使用 GitHub Pages 的，而 Github 在今年 3 月份因为某些众所周知的原因遭到了某个众所周知的系统的 SNI 阻断和端口封锁，导致了对 GitHub 的连接被严重干扰，那么有没有可能是因为这个原因导致了 Gridea 的同步失败呢，一波测试下来，果然，正是因为连接被严重干扰才导致了 Gridea 的同步失败。</p>
<h1 id="寻找解决方法">寻找解决方法</h1>
<p>既然是因为众所周知对原因受到了干扰，那最简单的解决方法自然是让代理软件代理 Gridea 对网络的访问，但是偏偏 Gridea 走的不是普通路线，一般的代理软件即使是全局代理，也管不着 Gridea！我翻了翻 Gridea 项目的 issue，发现有人提到在 Windows 端 Proxifier 这个软件可以直接强制 Gridea 受到代理，但是很不幸，我用的是 macOS 系统。</p>
<p>issue 中有人提到改 hosts 可以解决，但是我上面也说了，对 GitHub 的干扰主要是通过 SNI 阻断和封锁端口（也就是强制丢包），我认为改 hosts 也并非长久之计。</p>
<p>难道真的没有办法可以在 macOS 上简单的使用 Gridea 吗？好在天无绝人之路，我在众多 issue 中找到了<a href="https://blog.gd1214b.icu/post/F2_C5EVQh/">另一条路</a>，即通过 GitHub Desktop 来将 Gridea 生成的网页文件上传到 GitHub。</p>
<h1 id="解决方法">解决方法</h1>
<p>如果能用四个字总结这个解决方案，那就是——曲线救国，既然 Gridea 本身的上传系统不行，那就找个软件来代替它的上传系统。</p>
<p>首先就是下载 <a href="https://desktop.github.com">GitHub Desktop</a>，这就是我们拿来顶替 Gridea 上传系统的软件，分析一下思路，我们需要的是用 GitHub Desktop 上传 Gridea 输出的现成的网页文件，通过查看 Gridea 目录可以得知，存放最终网页文件的文件夹是 output，因此我们只要拿 GitHub Desktop 上传这个文件夹到 GitHub 就可以了。</p>
<p>考虑到上篇文章的受众，这里我先介绍如何找到 output 文件夹，大佬可以直接跳过。<br>
<img src="https://kokurasona.github.io/post-images/1627383530716.png" alt="" loading="lazy"><br>
首先打开 Gridea，点击左下角的设置图标，进入设置。<br>
<img src="https://kokurasona.github.io/post-images/1627384381377.png" alt="" loading="lazy"><br>
在设置中就可以看到源文件的完整路径。依照路径在文件管理器里找到 output 文件夹，不必进入，直接删除。</p>
<p>这时打开 GitHub Desktop，会提示你登陆 GitHub 账号。</p>
<p>登入后，在界面右侧选择对应的仓库。</p>
<p>此时弹窗显示选择路径，在 Local path 一行填入路径（在上文找到的路径基础上加上 output，即代表生成一个 output 文件夹并将仓库内容 clone 至此）点击 Clone。<br>
<img src="https://kokurasona.github.io/post-images/1627390441640.png" alt="" loading="lazy"><br>
然后打开 Gridea ，点击左侧的远程一栏，点击检查远程连接，结束后点击同步。（这一步可能会失败，没关系，因为我们不用 Gridea 的上传系统）<br>
<img src="https://kokurasona.github.io/post-images/1627391197119.png" alt="" loading="lazy"><br>
打开 GitHub Desktop，点击右侧的 Push origin，这一步完成后即成功。<br>
<img src="https://kokurasona.github.io/post-images/1627390623611.png" alt="" loading="lazy"><br>
请注意，以后再写了新文章要同步的时候，只需要点击同步，不需要检查远程连接。且在 GitHub Pages 中需要先在左侧的 Summary 内写出变动内容（我直接写 update，因为我懒），点击 Commit to master（如上图），然后再点 Push origin。</p>
<h1 id="总结">总结</h1>
<p>解决的教程到这里就结束了，这里简单说下思路。</p>
<p>在前面我将这种方法称为移花接木，即用 GitHub Desktop 代替 Gridea 的文件上传系统，通过这种方式，Gridea 其实从一个集生成和上传为一体的方便工具变成了一个网页文件生成器。这时有些人应该看出来了，Gridea 的同步按钮对应的功能不仅仅是上传文件，还有生成网页文件这一步，这也解释了为什么在点击同步后遭遇失败却依然能够进行接下来的步骤。</p>
<p>所有的内容到这里就彻底结束了，这里是 Sona，一个菜鸡准大学生，希望这篇文章能帮到你。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[10 分钟教你创建个人网站——傻瓜式的网站搭建教学]]></title>
        <id>https://kokurasona.github.io/post/Jbuc9l0W5/</id>
        <link href="https://kokurasona.github.io/post/Jbuc9l0W5/">
        </link>
        <updated>2020-02-23T15:25:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>在疫情肆虐全国，且尚未平息的当下，相信有很多被迫宅在家里的 有 志 青 年 ，不是葛优瘫在家里过养老生活，就是<s>漫游在网课的海洋里</s>（大雾）。由于我也没什么事情干，那么今天就给大家带来一篇教程，用通俗易懂的方式教你如何搭建个人网站来展（酷）示（炫）自（装）我（逼）。</p>
<p>请放心，全程不会产生任何费用，所以就算你跟我一样寒酸，也可以轻松的创建一个个人网站</p>
<h1 id="注册-github">注册 Github</h1>
<p>首先，因为网站是托管在 GitHub Pages 上的，所以首先我们要注册一个 <a href="https://github.com/">Github</a> 账号（同样，代码也可以托管在 Coding Pages 中，有兴趣的同学自己尝试，这里只谈用 GitHub Pages 的方法）。<br>
<img src="https://kokurasona.github.io/post-images/1582507159452.png" alt="" loading="lazy"><br>
自上而下依次是：用户名、邮箱、密码。</p>
<p><img src="https://kokurasona.github.io/post-images/1582507173524.png" alt="" loading="lazy"><br>
下一步。</p>
<p><img src="https://kokurasona.github.io/post-images/1582507196702.png" alt="" loading="lazy"><br>
Choose Free。</p>
<p><img src="https://kokurasona.github.io/post-images/1582507214828.png" alt="" loading="lazy"><br>
一些个性化设置，可以直接跳过往下滑。</p>
<p><img src="https://kokurasona.github.io/post-images/1582507226534.png" alt="" loading="lazy"><br>
直接 Skip this step 跳过。</p>
<p><img src="https://kokurasona.github.io/post-images/1582506935952.jpg" alt="" loading="lazy"><br>
进行邮箱验证。</p>
<p><img src="https://kokurasona.github.io/post-images/1582506985364.jpg" alt="" loading="lazy"><br>
验证完成后就可以开始使用了，恭喜你，第一步完成！</p>
<h1 id="创建仓库">创建仓库</h1>
<p>接下来我们要创建一个仓库，用于存放网页代码（放心，不需要你来写代码），点击 Start a Project<br>
<img src="https://kokurasona.github.io/post-images/1582507281811.png" alt="" loading="lazy"><br>
请注意，Repository name（即仓库名）须按照图示方法填写，即 用户名.github.io（填写你自己注册时使用的用户名），然后直接 Create Repository（可以不用像图示一样勾选README）。</p>
<h1 id="创建令牌">创建令牌</h1>
<p>顾名思义，令牌就是通行证，有了令牌我们才能在后续的步骤中将我们的代码上传到仓库中。<br>
<img src="https://kokurasona.github.io/post-images/1582507321399.png" alt="" loading="lazy"><br>
点击左上角的头像，进入设置。</p>
<p><img src="https://kokurasona.github.io/post-images/1582507369772.png" alt="" loading="lazy"><br>
<img src="https://kokurasona.github.io/post-images/1582507395903.png" alt="" loading="lazy"><br>
选择最下面的 Developer settings。</p>
<p><img src="https://kokurasona.github.io/post-images/1582507408567.png" alt="" loading="lazy"><br>
选择 Personal access tokens，然后 Generate new token。</p>
<p><img src="https://kokurasona.github.io/post-images/1582507422169.png" alt="" loading="lazy"><br>
接下来，Note 栏随便填一下，在下面的 Select scopes 中勾选 repo 即可。</p>
<p><img src="https://kokurasona.github.io/post-images/1582507431886.png" alt="" loading="lazy"><br>
直接 Generate token。</p>
<p><img src="https://kokurasona.github.io/post-images/1582507443826.jpg" alt="" loading="lazy"><br>
接下来生成的一串神秘代码（大雾）就是令牌了，复制后记得保存起来，令牌只会出现这一次，丢失的话就只能重新创建了。</p>
<h1 id="运用-gridea">运用 Gridea</h1>
<p>接下来就是穷极大杀器登场的时候了！，<a href="https://github.com/getgridea/gridea">Gridea</a> 可以直接让你使用预制好的网页模版（免去了自己写代码的步骤，当然你想自己创建模版也是可以的）。</p>
<p>下载Gridea：<br>
<a href="https://pan.baidu.com/s/1yqhfnzoNvjaFBb4-OCiw-g">百度云</a>  密码：u4fn<br>
<a href="https://github.com/getgridea/gridea/releases">Github</a><br>
（由于 GitHub 下载速度可能过慢，这里提供 Gridea 0.9.2 版本的百度云下载，后续更新版本请移步  GitHub 下载）</p>
<p>一波安装操作以后，我们进入 Gridea 界面<br>
<img src="https://kokurasona.github.io/post-images/1582513672918.png" alt="" loading="lazy"><br>
从侧边栏进入“远程”界面</p>
<p><img src="https://kokurasona.github.io/post-images/1582513693732.png" alt="" loading="lazy"><br>
按图示配置，域名和仓库名就是 用户名.github.io，邮箱填你注册 GitHub 时的邮箱，令牌就是刚刚创建的那串代码，填写完成后先点保存，然后点左下角的检测远程连接。</p>
<p><img src="https://kokurasona.github.io/post-images/1582513867618.png" alt="" loading="lazy"><br>
检测成功后，就可以开始根据模版修改出你自己的网站了，一共有四个内置主题（模版），还有更多模版可以下载。点击预览可以看到网页最后的效果，待修改完成后，点击同步，就可以将个人网站的代码上传刚刚创建好的 GitHub 的仓库中了。</p>
<p><img src="https://kokurasona.github.io/post-images/1582513913905.png" alt="" loading="lazy"><br>
同步完成后，如果你回到 GitHub 上再看，就会发现自己的仓库中多了一堆东西了。</p>
<h1 id="进入网页">进入网页</h1>
<p>在浏览器地址栏打入 https://用户名.github.io/ 即可访问你自己的网站了，怎么样，是不是很酷炫，接下来你就可以向你的朋友装逼了（bushi）<br>
本教程提及的仅仅是教你如何搭建出一个简易的个人网站，Gridea 有很多方便的功能，可以让你轻松添加评论系统、添加统计系统、实现代码高亮……精力有限，这些功能不能一一讲解，也希望各位有志青年们能自己多多探索，多搞骚操作，实现更多高级功能。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Nexus 历史回顾]]></title>
        <id>https://kokurasona.github.io/post/wIOkNc2QV/</id>
        <link href="https://kokurasona.github.io/post/wIOkNc2QV/">
        </link>
        <updated>2018-08-12T05:29:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>在发布【五年前的手机体验如何？——Google Nexus 5 体验】这篇文章后，引起了不少人对 Nexus 系列机型的回忆，因此我们决定带大家回顾整个 Nexus 系列历史，回顾当年 Nexus 的风采。</p>
<p>为了推动当时混乱的 Android 阵营向 Google 期望的方向发展，同时也为了向手机厂商和 App 开发者提供一个标杆机，Google 于 2010 年推出了第一款 Nexus 手机。到 2015 年，Google 在 Nexus 系列总共推出了 8 款手机，3 款平板电脑和 2 款数字媒体播放设备[1]。时间的轮回引导着产品的迭代，有更新自然就有淘汰。在 2016 年，Nexus 系列正式的完成了它的历史使命，被全新的 Pixel 系列所替代。借着这篇特殊的文章，我们就来一一回顾一下 这个 Android 昔日的标杆平台的历史。</p>
<h1 id="nexus-one">Nexus One</h1>
<p>2010 年 1 月，Google 与当时如日中天的 HTC 合作，推出了初代 Nexus 手机：Nexus One。Nexus One 配备了 1GHz 的单核处理器辅以 512MB RAM 和 4GB 闪存。同时拥有一个 microSD 扩展卡槽。480 × 800 分辨率的 3.7 英寸 LCD 屏幕，500万像素的后置摄像头。1400mAh的电池，并预装 Android 2.1 Eclair 系统。Nexus One 是 Nexus 系列的开山之作，从此，Android 平台有了一个真正的标杆和旗帜，看似简单的一小步，但却可以说是 Android 阵营的一大步。<br>
<img src="https://kokurasona.github.io/post-images/1627371301527.png" alt="" loading="lazy"></p>
<h1 id="nexus-s">Nexus S</h1>
<p>发布于 2010 年 11 月，由三星代工。</p>
<p>作为 Nexus 的第二台设备，由三星代工生产的 Nexus S 搭载了 Android 2.3 系统，同样采用 1Ghz 的单核处理器配以 512MB RAM，唯一的不同在于没有使用高通的处理器，而是采用了 ARM 公司的处理器。机器的设计在现在看来显得圆润光滑，别有一番韵味。其重要意义在于 Nexus S 凭借软硬件配合，为NFC的使用打下了良好的基础。<br>
<img src="https://kokurasona.github.io/post-images/1627371878146.jpg" alt="" loading="lazy"></p>
<h1 id="galaxy-nexus">Galaxy Nexus</h1>
<p>2011 年 10 月。Google 继 Nexus S 之后再次与三星合作，推出了 Galaxy Nexus。Galaxy Nexus 与 Nexus S 一样，外观设计充满了三星的影子。采用了一块分辨率为 720 × 1080 的 4.65 英寸的 Super AMOLED 屏幕，来自德州仪器的 1.2GHz 双核处理器，1GB RAM 和 16GB 闪存。500 万像素后置摄像头和 1750mAh 电池。Galaxy Nexus 是第一台采用了屏幕内虚拟按键的手机。并且此设计一直沿用到了今天。在全面屏时代的今天，许多之前不愿意使用虚拟按键的厂商也加入了这个阵营。</p>
<p>Galaxy Nexus 预装 Android 4.0 Ice Cream Sandwich。同样为此版本系统的首发机型。<br>
<img src="https://kokurasona.github.io/post-images/1627371914407.png" alt="" loading="lazy"></p>
<h1 id="nexus-7-2012">Nexus 7 (2012)</h1>
<p>发布于 2012 年 8 月，由华硕代工。</p>
<p>Nexus 7 是 Nexus 系列的第四款产品，千万别被数字蒙骗了[2]， Nexus 7 的发布时间比 Nexus 6 早的多，其为一款平板设备，而非手机，由华硕代工生产。CPU 为 N 厂的 Tegra 处理器，1GB 的 RAM，搭载 Android 4.1 系统。从中不难看出谷歌欲图与苹果在平板电脑领域竞争的野心。<br>
<img src="https://kokurasona.github.io/post-images/1627371955546.png" alt="" loading="lazy"></p>
<h1 id="nexus-4">Nexus 4</h1>
<p>2012 年 10 月，Google 与 LG 合作，打造了第四代 Nexus 手机。配置方面，Nexus 4配备了 768 × 1280 的 True HD IPS+ 面板。1.5GHz 的四核处理器，2GB RAM + 16GB 闪存。2100mAh 电池。支持 iPhone X 也有的无线充电。Nexus 4 是 Nexus 系列唯一一款采用前后双玻璃设计的设备。背面的全息小方块设计也堪称 Nexus 设计史上的经典。Nexus 4 最大的惊喜是 299 美元的极低售价，在上市之初可谓“一机难求”。<br>
<img src="https://kokurasona.github.io/post-images/1627371973004.png" alt="" loading="lazy"></p>
<h1 id="nexus-10">Nexus 10</h1>
<p>发布于 2012 年 10 月，由三星代工</p>
<p>顾名思义， Nexus 10 作为 Nexus 第二款平板电脑，配备了一块10英寸的LCD屏幕。搭载1.7GHz的双核处理器，配备了2GB的RAM，作为 Android 阵营欲图复刻 iPad 成功的尝试之一， Nexus 10 仍无法对 iPad 造成任何实质的威胁，在 Nexus 历史上也显得有些无足轻重。<br>
<img src="https://kokurasona.github.io/post-images/1627371982742.png" alt="" loading="lazy"></p>
<h1 id="nexus-72013">Nexus 7（2013）</h1>
<p>发布于 2013 年 7 月。是第一代 Nexus 7 的升级版。依然由华硕代工。最大的亮点是其 1920x1200 像素的 7 英寸屏幕。达到了 323ppi，这在当时的平板世界是一块顶级的屏幕。它同时还搭载了高通骁龙 S4 Pro 处理器，频率为 1.5GHz。搭配 400MHz Adreno 320 GPU。Nexus 7 (2013) 不失为一块优秀的 Android 娱乐平板。也是 iPad mini 最强的竞争对手。<br>
<img src="https://kokurasona.github.io/post-images/1627371993246.png" alt="" loading="lazy"></p>
<h1 id="nexus-5">Nexus 5</h1>
<p>2013 年 10 月 31 日，谷歌低调的发布了第五代 Nexus 手机 ——Nexus 5。与上一代一样，Google 选择了与 LG 合作。但与前代采用惊艳的星空玻璃后壳设计的 Nexus 4 手机不同，Nexus 5 采用了与 Nexus 7 (2013) 相同的具有类肤质涂层的聚碳酸酯外壳，拥有黑白红三种颜色。搭载高通骁龙800处理器，辅以 2G RAM。并配备了4.95英寸的 IPS LCD 显示屏。<br>
<img src="https://kokurasona.github.io/post-images/1627372015644.jpg" alt="" loading="lazy"></p>
<h1 id="nexus-6">Nexus 6</h1>
<p>发布于 2014 年 10 月，由摩托罗拉代工</p>
<p>相比于前代 Nexus 5 ，Nexus 6 配备了更强劲的 CPU，更大的 RAM，可 Nexus 6 并没有相比前代得到更大的成功，一定原因是由于 Nexus 6 的性价比相比于前代有所下降，但不得不说， Nexus 6 代表了时代的趋势：更大的屏幕，更高的分辨率…作为谷歌展示 Android 5.0 的舞台， Nexus 6 对的起“优秀”这个称号，是一款充满着极客范的手机。<br>
<img src="https://kokurasona.github.io/post-images/1627372029717.png" alt="" loading="lazy"></p>
<h1 id="nexus-9">Nexus 9</h1>
<p>发布于 2014 年 10 月，由HTC代工</p>
<p>与 Nexus 6 一并发布的 Nexus 9 与 Nexus 6 一样运用了 2K 分辨率的屏幕，但 Nexus 9 却使用了 IPS 的 9 英寸屏幕， Nexus 9 使用的材质与 Nexus 5 相仿，这也让 Nexus 9 获得了较好的手感，个人认为， Nexus 9 是 Nexus 平板系列最出类拔萃的一款，其以高性价比，高性能，高颜值的“三高”，为 Nexus 平板增光添彩。<br>
<img src="https://kokurasona.github.io/post-images/1627372041104.jpeg" alt="" loading="lazy"></p>
<h1 id="nexus-5x">Nexus 5X</h1>
<p>2015 年 9 月，Google 首次打破了惯例，第一次在同一年发布了两台 Nexus 手机 —— Nexus 5X 是其中主打中端的型号，由 Google 的好基友 LG 代工。其搭载了高通骁龙 808 处理器和 5.2英寸屏幕。Nexus 5X 可以说是对两年前及其成功 Nexus 5 的一次升级。Google 自然也是对它寄予了厚望，希望它能继承 Nexus 5 优秀的销量，成为下一部出“爆款” Nexus 手机。</p>
<p>但是，Nexus 5X 的销量最终没有完全达到预期的水平，并没有取得 Nexus 5 一般的成功。其中原因，性能方面，其中不少消费者抱怨 Nexus 5X 的 RAM 过小（仅为 2G），在 2015 年显得有些跟不上时代。价格方面，Nexus 5X 起售价为 379 美元（16GB 闪存）。32GB 闪存版本为 430 美元。同期发布的 Nexus 6P 起售价格 为500美元（32GB 闪存）。Nexus 5X 在定价上似乎不够合理。多花 70 美元，你就能买到一台更棒的智能手机。消费者显然明白哪一款更值得购买。</p>
<p>在 Nexus 5X 上市之后的一段时间里，陆续有小部分用户反映自己的 Nexus 5X 出现了意外崩溃，并且出现 Bootloop 现象（即无限重启）。起初，这个问题并没有被 Google 所重视。直到 2016 年 9 月，在 Nexus 5X 上市接近一年之时。这个问题开始大量爆发。许多用户反映自己的 Nexus 5X 出现了这个故障。Google 起初认为这是 Android 7.0 Nougat 所导致的软件问题。后来经过调查，证明 Nexus 5X 的 Bootloop 与系统版本无关。是由于制造缺陷导致的硬件故障。很快，Nexus 5X 的制造商 LG 宣布，出现此故障的 Nexus 5X 给予全额退款。这也是因为可替换的备机已没有库存，同时 Nexus 5X 也已经停产。此故障发生在 Nexus 系列最后一代产品上，十分的令人遗憾。<br>
<img src="https://kokurasona.github.io/post-images/1627372053110.jpg" alt="" loading="lazy"></p>
<h1 id="nexus-6p">Nexus 6P</h1>
<p>发布于 2015 年 9 月，由华为代工</p>
<p>说到 Nexus 6P 你会想到什么？我的话，第一秒就会想到那个严重拉低整体逼格的菊花标<s>因为经常被国人当作华为山寨机</s>（勘误：Nexus 6P上并无华为的图形LOGO），不过抛开这些不谈，主打高端的 Nexus 6P 显然相比前代提升了那些让人不爽的部分，相机得到了增强，画质还不错，还使用了双扬声器，同时也配备了更高性能的处理器。可为了获得更高的性能，付出的代价也是很明显的，火龙 810 发热严重，使用时经常因为过热而让你无法忍受，但不管怎么说， Nexus 6P 依然是值得购买的一款 Nexus 机型。<br>
<img src="https://kokurasona.github.io/post-images/1627372065917.png" alt="" loading="lazy"><br>
角注：<br>
1.它们分别是 Nexus Q 和 Nexus Player。</p>
<p>2.Nexus 设备的数字名称在绝大多数情况下表示此设备的屏幕尺寸。并非表示更新关系。比如 4.7 英寸的 Nexus 4，4.95 英寸的 Nexus 5 和 10 英寸的 Nexus 10 等等。</p>
<p>千万不要认为 Nexus 10 就比 Nexus 6P 牛逼很多😂。</p>
<p><strong>注：本文为合著，另一位作者为<a href="https://music.163.com/#/user/home?id=58971558">256bit</a>（文中称为比特）</strong></p>
<p>配图来源（序号为出现顺序）：<br>
1.由 <a href="https://commons.wikimedia.org/w/index.php?curid=29099537">Zach Vega - 自己的作品</a>，遵循 CC BY-SA 3.0。<br>
2.由 <a href="https://commons.wikimedia.org/w/index.php?curid=12628648">Goldmund100 - 自己的作品</a>，遵循 CC BY-SA 3.0。<br>
3.由 <a href="https://commons.wikimedia.org/w/index.php?curid=24273927">WilliamTheaker - 自己的作品</a>，遵循 CC BY-SA 3.0。<br>
4.由 <a href="https://developer.android.com/design/media/index_landing_page.png">Developers.android.com</a>，遵循 CC BY 2.5，摘自<a href="https://commons.wikimedia.org/w/index.php?curid=20780279">维基百科</a>。<br>
5.由 <a href="https://commons.wikimedia.org/w/index.php?curid=22727855">Android Open Source project</a>，遵循 CC BY 2.5。<br>
6.由 <a href="http://developer.android.com/about/versions/jelly-bean.html">developers.android.com</a>，遵循 CC BY 2.5，摘自<a href="https://commons.wikimedia.org/w/index.php?curid=22727795">维基百科</a>。<br>
7.由 <a href="https://web.archive.org/web/20131110032928/http://www.google.com/nexus/7/">Nexus 7 - Google</a>（存于互联网档案馆）。<br>
8.由 <a href="https://www.flickr.com/photos/lge/10600449773/">LG전자</a>，本文件来自于 LG 电子官方 Flickr。本标签並非著作權标签，且仍需要一个有效的著作權标签，请参阅 Commons:许可协议了解更多信息。遵循 CC BY 2.0，摘自<a href="https://commons.wikimedia.org/w/index.php?curid=29857955">维基百科</a>。<br>
9.由 <a href="http://developer.android.com/distribute/promote/device-art.html">Developers.android.com</a>，遵循 CC BY 2.5，摘自<a href="https://commons.wikimedia.org/w/index.php?curid=37059406">维基百科</a>。<br>
10.由<a href="https://commons.wikimedia.org/w/index.php?curid=38264884">彭家杰 - 自己的作品</a>，遵循 CC BY-SA 3.0。<br>
11.由 <a href="https://www.flickr.com/photos/lge/22276818352/in/dateposted/">LG Electronics</a>，遵循 CC BY 2.0，摘自<a href="https://commons.wikimedia.org/w/index.php?curid=44363797">维基百科</a>。<br>
12.由 <a href="https://commons.wikimedia.org/w/index.php?curid=70512118">Sparktour - 自己的作品</a>，遵循 Apache License 2.0。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[五年前的手机体验如何？——Google Nexus 5 体验]]></title>
        <id>https://kokurasona.github.io/post/uUsJGAYoh/</id>
        <link href="https://kokurasona.github.io/post/uUsJGAYoh/">
        </link>
        <updated>2018-08-04T04:44:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>2013 年 10 月 31 日，谷歌低调的发布了第五代 Nexus 手机 ——Nexus 5。与上一代一样，Google 选择了与 LG 合作。但与前代采用惊艳的星空玻璃后壳设计的 Nexus 4 手机不同，Nexus 5 采用了与 Nexus 7 (2013) 相同的具有类肤质涂层的聚碳酸酯外壳，拥有黑白红三种颜色。搭载高通骁龙800处理器，辅以 2G RAM。并配备了4.95英寸的 IPS LCD 显示屏。是 2013 年标准的旗舰机配置。<br>
<img src="https://kokurasona.github.io/post-images/1627287123217.jpg" alt="Nexus 5 黑色版本" loading="lazy"><br>
凭借着独到的设计与较低的售价，Nexus 5 拥有了出众的性价比。最终成为了 Nexus 系列中最受欢迎的机型。时隔五年，让我们再来一起体验 Nexus 5，品味其带给我们的独到魅力。</p>
<p>为了写出详尽的使用体验，我们购买了两台 Nexus 5，且本文的编辑之一已经使用了两年 Nexus 5。现在我们将我们的体验总结起来，展现给大家。</p>
<p>众所周知，手机的硬件配置、设计与工艺、系统与软件三者一起，构成了一台手机的用户体验。本文也将大致分为这三部分来描述。但由于硬件配置部分在本文首段已经提及，故之后不再加赘述。</p>
<h1 id="设计与工艺">设计与工艺</h1>
<p>Nexus 5 的造型与 Nexus 4 可谓一脉相承。<br>
<img src="https://kokurasona.github.io/post-images/1627284285831.jpg" alt="左：Nexus 4 右：Nexus 5" loading="lazy"><br>
但是与 Nexus 4 相比，Nexus 5 的设计显得简约了许多，机身除了必须的按钮，接口几乎没有任何多余的元素，极度的简约。线条也变得更为干练。可以说，设计风格非常的 Google。——看似简单，但无形之中彰显着设计的功力。</p>
<p>Nexus 5 拥有三种颜色，黑色白色与红色，特别是白色和红色的听筒网采用了白色（红色）设计，对于简洁的正面板起到了不错的点缀作用。可谓是点睛之笔。</p>
<p>极简的正面设计：上下弧线，彩色呼吸灯，很快就能“出卖”他是一台 Nexus 手机的身份。虽然 Nexus 5 的外观在全面屏时代的 2018 年略显 “落后” 。但是也是个性十足。</p>
<p>工艺方面，之前已经提过了，采用了有类肤质涂层的聚碳酸酯的材质，握持时十分的贴手，摸上去如同少女的肌肤一般让人留连往返，白色版更是显得光滑通透，吹弹可破……和同时期的 Lumia 925 和 iPhone 5c 一样，属于塑料中的贵族。<br>
<img src="https://kokurasona.github.io/post-images/1627284389325.jpg" alt="Nexus 5 白色款" loading="lazy"><br>
但请注意，作为手感爆炸，让你欲罢不能的代价，请您务必在使<s>♂</s>用时也把她当成真正的少女对待。聚碳酸酯表面的类肤质涂层硬度较低，就连指甲不经意间的触碰也可能留下无法抹去的伤口，可谓是一次手滑后悔半生。（比特之前的一台 Nexus 5，后盖成色可谓惨不忍睹）<br>
<img src="https://kokurasona.github.io/post-images/1627284586488.jpg" alt="伤痕累累的 Nexus 5 后盖
" loading="lazy"><br>
同时，Nexus 5 的中框设计也存在比较大的缺点，不少用户反映，Nexus 5 的边框十分容易开裂（我们手里的两台 Nexus 5 都遇到了这个问题）尤其是黑色版本。</p>
<h1 id="系统与软件">系统与软件</h1>
<p>作为 Android 4.4 Kitkat 的首发机型， Nexus 5 使用的自然是谷歌爸爸原生系统了，官方系统最高可以升级到 6.0.1 。在 6.0.1 的原生加持下， Nexus 5 仍然保持着足以吊打部分当代手机的流畅度，但国内的网络环境还是会让它有些水土不服，加上电池续航尿崩这个众所周知的“特性”，使得其在国内应付毒瘤软件方面不得不采取对策——使用黑阈对流氓软件进行管制，正所谓“要用软件对付软件”。</p>
<p>在系统体验方面可谓十分流畅，运行起来丝滑流畅，如果再配合正确的上网方式的话， Nexus 5 依然能够在现在大放异彩。<br>
<img src="https://kokurasona.github.io/post-images/1627284995557.jpg" alt="Nexus 5 运行 Android 6.0 Marshmallow" loading="lazy"><br>
前面提到，谷歌对 Nexus 5 的支持到 6.0.1 就彻底结束了[1]，但这点破事怎么可能阻挡众多机佬对更新的渴望？五儿子毕竟还是谷歌的亲儿子，就算断了官方更新，但民间大神依然坚持不懈的将 Nexus 5 送上了 8.1 ，可就当我们喊着五儿子万岁并刷入奥利奥，准备细细品味的时候，让你完全不能忽视的卡顿却一直在向你传递一个令人有些心痛的事实——五儿子已经老了，运行 8.1 让它显得十分不堪，与运行 6.0 时的丝般顺滑相比简直判若两机。想必之后的 9.0 版本很大可能只会越来越糟，而不是好转。我们两位编辑都将 Nexus 5 刷入 8.1 并使用了一段时间，最后我们都乖乖地回了官方的 6.0.1 ，回到那个我们最熟悉的 Nexus 5 身边。</p>
<p>软件方面， Nexus 5 预装了谷歌全家桶，由于编者我长期能够使用正确的方式上网，因此并没有感受到谷歌全家桶带来的不便。 Chrome 浏览器 和 Google 相册 将体验上升到一个新高度，使得操作变得便捷快速。只要常年使用正确的上网方式，谷歌服务的也不会消耗多少电量，且可以用过停用来阻止其耗电。</p>
<p>美中不足当然依然存在，原生 6.0.1 中并没有预装录音软件，虽说现在都 8102 年了，录音这玩意用的少了，可这多少也带给我了一些不便，虽然不属于必需品，但总是有一个会比较安心。</p>
<p>虽然已经过去了五年时光，但是 Nexus 5 仍然在软件这一方面表现出来强大的生命力。这或许是亲儿子系列手机最大的红利吧。</p>
<p>最为人诟病的地方自然在 Nexus 5 的相机上了，真亏你长这么大一个摄像头，都可以跟某美拍手机摄像头大小媲美了（而且还凸起），可拍出的照片依然画质感人，实在让人难以理解。可是！这可不是软件的锅， Google相机 作为一款傻瓜相机，其实十分优秀，这都是得益于谷歌自家研发的算法，有句话讲的好：“像素不够，算法来凑” 可这句话偏偏不适用于 Nexus 5 ，即使得到了谷歌的顶尖算法加持，可 Nexus 5 拍出的照片也依然不堪入目。这样的拍照能力在 2013 年也几乎是旗舰机中垫底的水平，更不要说是五年后的今天了。不过，只要在后期下一点功夫，拍出来的照片还是能勉强看看的。</p>
<p>（此处应有一张不错的图片，<s>但是我们拍不出来</s>）</p>
<h1 id="其它方面">其它方面</h1>
<p>电池续航，Nexus 5 的电池续航在 2018 年的今天表现怎么样呢？<br>
<img src="https://kokurasona.github.io/post-images/1627285252212.jpg" alt="" loading="lazy"><br>
稍等，我先去充个电。</p>
<p>（一小时以后）</p>
<p>什么？你说 Nexus 5 有续航能力？？？<br>
<img src="https://kokurasona.github.io/post-images/1627285289269.jpg" alt="" loading="lazy"><br>
握持感，这里因个人喜好再多说两句，4.95英寸的屏幕提供了良好的握持体验，整机重量较轻，在单手握持进行操作的时候十分的顺手，仿佛正握着少女的包裹着白丝的小腿一般自然（黑色版的就是黑丝！），即使长时间单手握持也毫无压力。</p>
<p>总结一下，Nexus 5 的外观与手感都很不错，各路传感器齐全，呼吸灯设计优异，性价比很高，手机搭配原生 Android 6.0 使用体验仍然很好，搭配 7.0 体验也尚可，但在 8.0 时体验全无，日常轻度使用没问题。但扬声器音质中规中矩，屏幕素质一般，常用软件配备不全，且边框易碎裂，摄像头素质极低，续航能力更是 tan90° ，但凭借低廉的售价，在当时其实很值得买，但在 2018 年，它并没有突出的表现，在官方停止更新后更显得脆弱。如果你只是想以低价体验原生，那么这款机子确实能满足你的需求，如果你想要买备用机，还是不要打 Nexus 5 的主意了。其实买 Nexus 更多的是出于信仰而不是实用主义，走着走着，不知不觉间，Nexus 系列竟已经被 Pixel 所彻底替代，就如同自己当年的热情如今被渐渐冲淡一样，Nexus 其实更像是一位开拓者，不以出名为目的，却无意间为后辈留下了丰厚的遗产。Nexus 已经逝去，如今我们只能以这样的方式去怀念它，同时也怀念当年的我们。Nexus 就如同一个符号，一直铭刻在我们那颗曾经无比火热的心中，它标志着一个时代的结束，但同时也预示着新时代的开启。</p>
<p>角注：<br>
1.根据 Google 官方 Nexus 设备支持网站的<a href="https://support.google.com/nexus/">说明</a>，Nexus 5 的 Android 版本更新支持在 2015 年 10 月结束。但其安全更新一直持续到了 2016 年 10 月。</p>
<p><strong>注：本文为合著，另一位作者为 <a href="https://music.163.com/#/user/home?id=58971558">256bit</a>（文中称为比特）</strong></p>
<p>配图来源（序号为出现顺序）：<br>
1.由 <a href="https://www.flickr.com/photos/lge/10600449773/">LG전자</a>，本文件来自于 LG 电子官方 Flickr。本标签並非著作權标签，且仍需要一个有效的著作權标签，请参阅 Commons:许可协议了解更多信息。遵循 CC BY 2.0，摘自<a href="https://commons.wikimedia.org/w/index.php?curid=29857955">维基百科</a>。<br>
2.来自 LG 官网 <a href="https://www.lg.com/us/cell-phones/lg-LGE960-nexus-4#">Nexus 4</a>、<a href="https://www.lg.com/uk/mobile-phones/lg-D821">Nexus 5</a> 产品页。<br>
3.由比特本人实拍。<br>
4.由比特本人实拍。<br>
5.来自 <a href="https://www.droid-life.com/2015/07/10/video-android-m-preview-2-overview/">droidlife</a>。<br>
6.系统内截图。</p>
]]></content>
    </entry>
</feed>